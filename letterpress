#!/usr/bin/perl -w

use strict;
use File::Basename qw/dirname/;
use File::Spec;
use Storable;

my $appDir = dirname($0);

my $cacheDir = File::Spec->catfile($appDir, '.letterpressCache');
if (! -d $cacheDir) {
  mkdir $cacheDir;
}
if (!(-r $cacheDir && -w $cacheDir && -x $cacheDir)) {
  die "insufficient permissions with cache dir $cacheDir";
}

my $wordFile = File::Spec->catfile($appDir, 'words.txt');
-e $wordFile or die "cannot find word file $wordFile";


my ($boardStr, $desiredStr) = @ARGV;

my ($board, $desired);

$board = letterStringToCanonicalArray($boardStr);
if (@$board != 25) {
  die "board should be 25 chars"
}
if ($desiredStr) {
  $desired = letterStringToCanonicalArray($desiredStr);
} else {
  $desired = [];
}


sub getPossibleWords {
  my $board = shift;
  my $words = [];
  my $cachePath = "$cacheDir/" . join "", @$board;
  if (-e $cachePath) {
    $words = retrieve($cachePath);
  } else {
    open my $wordFh, '<', $wordFile or die $!;
    while (<$wordFh>) {
      chomp($_);
      my $wordLetters = letterStringToCanonicalArray($_);
      if (isSubset($board, $wordLetters)) {
        push @$words, [ $_, $wordLetters ];
      }
    }
    store $words, $cachePath;
  }
  return $words;
}

# assuming two arrays of sorted letters
sub isSubset {
  my ($set, $sub) = @_;
  if (@$sub == 0) {
    return 1;
  }
  my $i = 0;
  for my $letter (@$set) {
    if ($sub->[$i] eq $letter) {
      $i++;
    }
    if ($i == @$sub) {
      return 1;
    }
  }
  return 0;
}

sub getDesiredMatcher {
  my $desired = shift;
  return sub {
    return isSubset($_[0], $desired);
  };
}

sub letterStringToCanonicalArray {
  my ($letterStr) = @_;
  $letterStr =~ s/\W//g;
  my @arr;
  for my $i (0..length($letterStr)-1) {
    push @arr, substr($letterStr, $i, 1);
  }
  return [ sort @arr ];
}


my @words;
my $isDesired = getDesiredMatcher($desired);
foreach my $wordTuple ( @{ getPossibleWords($board) } ) {
  my ($word, $wordLetters) = @$wordTuple;
  if ( $isDesired->($wordLetters) ) {
    push @words, $word;
  }
}

if (@words) {
  print join " ", sort { length($b) <=> length($a) } @words;
  print "\n";
}

